<?php
require_once "dbh.php";

/**
 * Database Functions
 */

// * Read functions *

/**
 * Get user ID by username
 * @return int|false User data or false 
 */
function stmt_getUserId(PDO $pdo, string $username)
{
    $stmt = $pdo->prepare("SELECT userId FROM users WHERE username = ?");
    $stmt->execute([$username]);
    return $stmt->fetchColumn();
}

/**
 * Get username by userId
 * @return string|false username or false 
 */
function stmt_getUsernameByUserId(PDO $pdo, string $userId)
{
    $stmt = $pdo->prepare("SELECT username FROM users WHERE userId = ?");
    $stmt->execute([$userId]);
    return $stmt->fetchColumn();
}

/**
 * check if username exists
 * @return bool
 */
function stmt_usernameExists(PDO $pdo, string $username)
{
    $stmt = $pdo->prepare("SELECT 1 FROM users WHERE username = ? LIMIT 1");
    $stmt->execute([$username]);
    return (bool)$stmt->fetchColumn();
}

/**
 * Get users email by user id
 * @return string|false User data or false 
 */
function stmt_getEmail(PDO $pdo, int $userId)
{
    $stmt = $pdo->prepare("SELECT email FROM users WHERE userId = ?");
    $stmt->execute([$userId]);
    return $stmt->fetchColumn();
}

/**
 * check if email exists
 * @return bool
 */
function stmt_emailExists(PDO $pdo, string $email)
{
    $stmt = $pdo->prepare("SELECT 1 FROM users WHERE email = ? LIMIT 1");
    $stmt->execute([$email]);
    return (bool)$stmt->fetchColumn();
}


/**
 * check if admin account
 * @return bool|false
 */
function stmt_getAdminByUserId(PDO $pdo, int $userId)
{
    $stmt = $pdo->prepare(("SELECT isAdmin FROM users WHERE userId = ?"));
    $stmt->execute(([$userId]));
    return $stmt->fetchColumn();
}

/**
 * Get user credentials for authentication
 * @return string|false Contains userId and hashed password or false 
 */
function stmt_getAuthCredentials(PDO $pdo, string $username)
{
    $stmt = $pdo->prepare("SELECT password FROM users WHERE username = ?");
    $stmt->execute([$username]);
    return $stmt->fetchColumn();
}

/**
 * Get user's last login time
 * @return string|false Last login data or false 
 */
function stmt_getLastLogin(PDO $pdo, string $userId)
{
    $stmt = $pdo->prepare("SELECT lastLogin FROM users WHERE userId = ?");
    $stmt->execute([$userId]);
    return $stmt->fetchColumn();
}

/**
 * Get user's login interval limit
 * @return string|false Login interval data or false 
 */
function stmt_getLoginInterval(PDO $pdo, string $userId)
{
    $stmt = $pdo->prepare("SELECT loginInterval FROM users WHERE userId = ?");
    $stmt->execute([$userId]);
    return $stmt->fetchColumn();
}

/**
 * Get array of imgname => imgpath
 * @return array Array of image names and image paths
 */
function stmt_getImageArray(PDO $pdo, int $limit): array
{
    $stmt = $pdo->prepare("SELECT * FROM images ORDER BY random() LIMIT ?");
    $stmt->bindValue(1, $limit, PDO::PARAM_INT);
    $stmt->execute();
    return $stmt->fetchAll(PDO::FETCH_ASSOC);
}

/**
 * Get TAC by userId
 * @return string|false
 */
function stmt_getTAC(PDO $pdo, int $userId)
{
    $stmt = $pdo->prepare("SELECT TAC FROM users WHERE userId = ?");
    $stmt->execute([$userId]);
    return $stmt->fetchColumn();
}

/**
 * Get time generated by userId
 * @return string|false
 */
function stmt_getTimeGenerated(PDO $pdo, int $userId)
{
    $stmt = $pdo->prepare("SELECT timeGenerated FROM users WHERE userId = ?");
    $stmt->execute([$userId]);
    return $stmt->fetchColumn();
}

/**
 * Get key by userId
 * @return string|false
 */
function stmt_getKey(PDO $pdo, int $userId)
{
    $stmt = $pdo->prepare("SELECT key FROM users WHERE userId = ?");
    $stmt->execute([$userId]);
    return $stmt->fetchColumn();
}

/**
 * Get balance by userId
 * @return int|false
 */
function stmt_getBalance(PDO $pdo, int $userId)
{
    $stmt = $pdo->prepare("SELECT balance FROM users WHERE userId =?");
    $stmt->execute([$userId]);
    return $stmt->fetchColumn();
}

// * Write functions *

/**
 * Create new user account
 * @return bool True on success, false on failure
 */
function stmt_createUser(
    PDO $pdo,
    string $username,
    string $email,
    string $fName,
    string $lName,
    string $password
): bool {

    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);

    $stmt = $pdo->prepare("INSERT INTO users 
            (username, email, fName, lName, password) 
            VALUES (?, ?, ?, ?, ?)");

    return $stmt->execute([
        $username,
        $email,
        $fName,
        $lName,
        $hashedPassword
    ]);
}

/**
 * Update user's last login time
 * @return bool True on success, false on failure
 */
function stmt_updateLoginTime(PDO $pdo, string $userId, string $lastLogin): bool
{
    $stmt = $pdo->prepare("UPDATE users SET lastLogin = ? WHERE userid = ?");
    return $stmt->execute([$lastLogin, $userId]);
}

/**
 * Save key to database
 * @return bool True on success, false on failure
 */
function stmt_updateKey(PDO $pdo, string $userId, string $key): bool
{
    $stmt = $pdo->prepare("UPDATE users SET key = ? WHERE userId = ?");
    return $stmt->execute([$key, $userId]);
}

 /**
 * Save TAC to database
 * @return bool True on success, false on failure
 */
function stmt_updateTAC(PDO $pdo, string $userId, string $TAC): bool
{
    $stmt = $pdo->prepare("UPDATE users SET TAC = ? WHERE userId = ?");
    return $stmt->execute([$TAC, $userId]);
}

 /**
 * Save time tac generated to database
 * @return bool True on success, false on failure
 */
function stmt_updateTimeGenerated(PDO $pdo, string $userId, string $timeGenerated): bool
{
    $stmt = $pdo->prepare("UPDATE users SET timeGenerated = ? WHERE userId = ?");
    return $stmt->execute([$timeGenerated, $userId]);
}
